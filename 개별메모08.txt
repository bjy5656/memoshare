문자열 길이 반환 
- .length()

for문 유의사항 
- for문 중괄호 영역 안에는 하나 이상의 실행 문장이 있어야 한다. 
- for문에서 선언한 변수는 이중 for문에서 다시 선언할 수 없다. 

반복문 제어 및 유의사항 
- break, continue, 플래그 변수, return 등을 상황에 알맞게 사용한다. 
- break : 반복문을 탈출하고 실행할 코드가 있을 때
- continue : 반복문을 다시 실행해야 할 때
- 플래그 변수를 false로 변경 : 반복문 안에서 이후에 실행할 코드가 있을 때 
- return : 프로그램 자체를 종료할 때 
- break는 반복문과 switch문에서 사용될 수 있고 break 바로 바깥의 반복문, switch문만 탈출한다.

return
- reutrn이 실행되는 시점에서 프로그램(main 메소드)이 종료된다. 

배열 
- 여러 값을 담을 수 있는 여러 저장공간의 나열
- JVM이 관리하는 RAM(Random Access Memory)의 heap 영역의 연속된 위치에 배열의 각 저장공간이 할당된다. 
- 배열 변수에는 주소값이 저장되며 이는 stack 영역에 저장된다. 
- [Ljava.lang.String;@279f2327 
- [는 1차원 배열을 의미한다.  
- 배열 변수의 주소값은 heap 영역에 위치한 저장공간의 시작 주소값(참조값)이다.
- 배열 변수를 참조변수 라고도 한다.
- 배열 변수만 선언되고 배열 생성은 되지 않았을 때 변수를 출력하면 null이 출력된다. 
- 위의 경우 index로 배열 안의 공간에 접근하려고 하면 NullPointerException 오류가 출력된다. 
- 배열 변수에 크기만 지정해준 배열을 대입하면, 기본값을 갖는 배열이 생성된다. 
- 정수형 배열의 기본값은 0, 문자열 배열의 기본값은 null이다. 

인덱스
- 배열의 각 저장공간이다. 
- 배열 변수 이름, 즉 참조변수 이름 뒤에 [저장공간번호]로 나타낸다. 

문자형 변수 / 문자형 배열 인덱스 주의사항 
- 문자형 변수에 숫자형 변수(정수, 실수)의 이름을 사용하여 숫자형 변수의 값을 대입하거나 다른 수 혹은 문자와 산술연산한 후 대입할 수 없다. (형변환 불가)
- int형 변수에는 문자형 변수의 이름을 사용하여 그 값을 대입하거나 다른 수 혹은 문자와 산술연산한 후 대입할 수 있다. (int로 형변환 가능, short에는 안 됨) 
- 문자형 변수에 0이나 양의 정수(유니코드 값 범위 내의 수, 2바이트 범위의 수 => 65535 까지)를 직접 대입하는 것은 가능하다. 
- 문자형 변수에 그 외의 수를 직접 대입할 수 없다. 
- 문자형 변수에 증감연산자를 사용하거나 숫자(정수, 실수)와 산술연산이 가능하다. 

Runtime Data Area
- JVM이 관리하는 메모리 영역이다.

printf문 자동완성 등록하기 
- window -> preferences -> Java -> editor -> templates -> New -> context : Java statements
-> Pattern : System.out.printf(${word_selection}${});${cursor}

 이클립스 기타 단축키 
- alt + shift + 위/오른쪽/왼쪽 => 한 단어 -> 줄 -> 문단 선택 
- for -> ctrl + space => 기본 for문 완성
- if / ifelse + ctrl + space => 기본 if문 / if~else문 완성
- ctrl + F7 => 창 이동(편집기 -> 프로젝트 탐색창 / 콘솔창) 
- ctrl + shift + b => breakpoint(중단점) 지정(코드가 있는 줄에서만 적용 가능, 디버깅 시 현재 커서가 위치한 코드 위 줄까지 실행) 
- breakpoint 지정 -> F11 => 디버깅 모드 진입 
- 디버깅 모드 진입시 Debug창 보이지 않게 하기 => Debug탭 우클릭 -> Detach -> 창 크기 줄이고 잘 안 보이는 곳으로 위치 -> window -> perspective -> save perspective as -> perspective 저장 
- ctrl + r => 현재 라인까지 실행(breakpoint를 설정한 후 F11을 눌러 디버깅 모드로 진입, 멈춘 코드 이후에서 설정) 
- ctrl + F2 => 디버깅 종료 
- alt + shift + F8 => perspective 변경 
- ctrl + shift + l => 단축키 보기 
- 단축키가 동작하는 상황 변경 => window -> preferences -> general -> editors -> keys -> 단축키 검색 -> When 드롭 다운 -> 상황 선택 
- ctrl + . => 다음 오류부분으로 가기 
- ctrl + , => 이전 오류부분으로 가기 
- 오류 부분으로 커서 이동 -> F2 => 오류 원인 표시 
- 오류 부분으로 커서 이동 -> ctrl + 1 => 오류 해결 방안 표시 
- ctrl + shift + enter => 위 줄에 줄 추가 
- shift + enter => 다음 줄에 줄 추가 
- ctrl + 위/아래 => 스크롤 
- ctrl + shift + 위/아래 => 이전/다음 메소드나 클래스로 이동 
- ctrl + 오른쪽/왼쪽 => 단어 이동(ctrl + shift + p와 함께 중괄호 벗어날 때 사용 가능)
- ctrl + shift + 오른쪽/왼쪽 => 단어 단위로 선택 
- alt + 오른쪽/왼쪽 => 다음/이전 커서 위치로 이동 
- ctrl + e => 원하는 편집기 창으로 이동(엔터 누르면 이동) 
- ctrl + F6 => 원하는 편집기 창으로이동(바로 이동)
- ctrl + pageUp => 왼쪽 편집기 창으로 이동 
- ctrl + pageDown => 오른쪽 편집기 창으로 이동  
- end => 현재 줄 끝으로 이동 
- home => 현재 줄 처음으로 이동 
- shift + home => 현재 커서부터 오른쪽 끝까지 선택 
- shift + end => 현재 커서부터 왼쪽 끝까지 선택 
- ctrl + end => 페이지 맨 아래로 이동 
- ctrl + home => 페이지 맨 위로 이동 
- ctrl + shift + home => 현재 커서부터 페이지 맨 위까지 선택 
- ctrl + shift + end => 현재 커서부터 페이지 맨 아래까지 선택 
- ctrl + shift + p => 소괄호/중괄호 영역 시작, 중간(원래 커서가 있던 위치), 끝으로 이동 
- ctrl + w => 현재 파일 닫기 
- ctrl + shift + w => 열린 파일 모두 닫기 
- ctrl + F4 => 현재 창 닫기 
- ctrl + o => 현재 편집 화면의 메소드나 필드로 이동 