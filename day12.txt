복습 -> static 블록 -> 변수의 종류 -> enum -> git hub -> 팀과제 

0. 복습
1) 클래스 
	필드, 메소드, 생성자 

	class 클래스명{
		//멤버
		//필드, 메소드, 생성자 
	}

2) 객체화(인스턴스화) 
	클래스자료형 참조변수 = new 생성자();
	--------------	------------
	stack 영역	heap 영역 

3) 클래스 멤버 접근 
	객체명.필드명 
	객체명.메소드명(); 

4) static 
	method 영역	=> 프로그램 시작부터 종료까지 계속 남아있는 영역 
	정적변수 : static변수, 클래스 변수 
	정적메소드 : static 메소드, 클래스메소드 

	클래스명.정적변수;
	클래스명.메소드명();

5) 클래스 
	class 클래스명 
		//필드
		//인스턴스 변수 
		//스태틱 변수 
		//상수

		//메소드
		//인스턴스 메소드 
		//스태틱 메소드 
		
		//생성자 
		//기본생성자 
		public 클래스명(){

		}

		public 클래스명(int num) {
			this.num = num; 
			int result = num + 10; 
		}

		public 클래스명(int num1, int num2){
			this(num1);
			this.num2 = num2; 	
		}
	}
	
6) this, this() 
	this : 객체 자기자신(참조값)
	this() : 자기자신의 생성자 

7) 다형성 => 오버로딩 
	같은 메소드 

1. 스태틱 블록(정적블록)
	클래스가 로드될 때 실행되는 블록 
	주로 정적멤버를 초기화 하는 데 사용된다 
	모든 인스턴스가 생성되기 전에 실행되므로  초기화 작업에 유용하다 

	로드시점 : 클래스가 처음 로드될 때 실행된다 
		- 클래스의 객체가 생성될 때(클래스 인스턴스화) 
		- 클래스의 정적멤버(스태틱변수, 스태틱메소드)에 접근할 때 
		- 클래스를 사용하는 다른 클래스가 로드될 때(참조하려는 클래스에 의존성이 있는 경우) 

2. final
	final 변수 	상수(값변경불가) 
	final 메소드 	오버라이딩 불가 : 재정의 불가
	final 클래스 	상속불가 

3. enum 열거형 
	일련의 고정된 값(상수)들을 나타내기 위한 특별한 데이터 유형(클래스) 
	클래스 타입(reference type)으로 취급된다 

1) enum 사용하는 이유 
	코드의 가독성과 안정성 
	컴파일 타입 오류 방지 
	관련 데이터와 동작을 묶을 수 있음 
	
2) 문법 
	enum Day{
		MONDAY, TUESDAY, WEDESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
	}

3) 특징 
	enum에 선언된 값은 상수 객체로, 각 값은 컴파일 시점에 고유한 인스턴스로 생성된다 
	값의 순서는 0부터 시작하며 순서를 정수로 얻으려면 ordinal() 메소드를 사용한다 
	
	열거형 배열 
		values() 모든 열거형 값을 배열로 얻을 수 있다 
 	name(), valueOf()
		name() : 열거형 이름(문자열)을 반환 
		valueOf(문자열) : 문자열을 열거형 값으로 반환

4. 변수의 종류 
	종료		선언위치/특징			메모리영역		수명
	상수		final 키워드 값, 수정 불가 		상수 풀/스택	블록/클래스 종료시까지
	지역변수		메소드나 블록내에서 선언		스택		메소드 종료 시 소멸
			외부에서 접근 불가
	매개변수		메소드 선언 시 전달 값을 받기위한 변수	스택		메소드 실행 중 유지 
	인스턴스변수	클래스 내부에서 선언			힙		객체가 살아있는 동안 
			객체마다 별도로 존재(객체명.인스턴스변수명)
	정적변수		static 키워드			메소드		프로그램 시작부터 종료까지 
			클래스 로딩 시 하나만 생성	

5. git-hub
1) .gitignore 파일 
	git이 버전관리에서 무시할 파일이나 디렉터리를 지정하는 데 사용한다 
	git에게 이 파일이나 폴더는 추적하지 않도록 알려주는 설정파일 
	UTF - 8로 저장
	경로 내에 한개만 있는 것이 좋다.(충돌 방지)
	
1))
https://github.com/github/gitignore
-> java.gitignore
->
# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*

2)) 
https://www.toptal.com/developers/gitignore
-> windows, macos, java, ecliipse 
-> 생성
-> 
# Created by https://www.toptal.com/developers/gitignore/api/windows,java,eclipse,macos
# Edit at https://www.toptal.com/developers/gitignore?templates=windows,java,eclipse,macos

### Eclipse ###
.metadata
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.recommenders

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# PyDev specific (Python IDE for Eclipse)
*.pydevproject

# CDT-specific (C/C++ Development Tooling)
.cproject

# CDT- autotools
.autotools

# Java annotation processor (APT)
.factorypath

# PDT-specific (PHP Development Tools)
.buildpath

# sbteclipse plugin
.target

# Tern plugin
.tern-project

# TeXlipse plugin
.texlipse

# STS (Spring Tool Suite)
.springBeans

# Code Recommenders
.recommenders/

# Annotation Processing
.apt_generated/
.apt_generated_test/

# Scala IDE specific (Scala & Java development for Eclipse)
.cache-main
.scala_dependencies
.worksheet

# Uncomment this line if you wish to ignore the project description file.
# Typically, this file would be tracked if it contains build/dependency configurations:
#.project

### Eclipse Patch ###
# Spring Boot Tooling
.sts4-cache/

### Java ###
# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### macOS Patch ###
# iCloud generated files
*.icloud

### Windows ###
# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# End of https://www.toptal.com/developers/gitignore/api/windows,java,eclipse,macos

팀장 => 레포지토리
	팀원 초대 => 팀원 이메일 확인 

※내 저장소 주소 
https://github.com/bjy5656/kdt_java.git

※팀장님 저장소 주소(팀 저장소)
https://github.com/BuddleK/team_pro1.git

[팀장]
1. GIT-HUB 레포만들기
2. 폴더 구조(패키지, 클래스 등 만들기)
   - 메소드 위치 선정(주석으로)
   - gitignore 파일
   - readme.md 파일
      문제
      이름 - 기능 구현 내용
3. main브랜치에서 커밋 -> github 레포로 push
4. 팀원에게 클론따라고 말하기
5. 개인 브랜치 생성

[팀원]
1. 폴더구조 확인 후 클론
2. 개인 브랜치 생성
3. 본인이 만들어야하는 메소드 확인

























