0. 복습 
1) 배열 
	하나의 자료형으로 여러가지 값을 저장할 수 있는 저장공간 

2) 배열의 사용 목적 
	데이터의 집합을 효율적으로 관리하기 위한 목적 
	데이터의 순서를 보존하기 위한 목적 
	반복문을 사용하여 배열의 요소를 처리하기 위한 목적 
	메모리를 효율적으로 사용하기 위한 목적 
	데이터를 정렬하거나 검색하기 위한 목적 

3) 배열의 선언 
	자료형[] 배열명 = {값1, 값2}; 
	자료형[] 배열명 = new 자료형[칸수];
	자료형[] 배열명 = null; 

	자료형[][] 배열명 = {{1,2,2},{3,4,4}};
	자료형[][] 배열명 = new 자료형[행][열]; 

4) 메소드 정의 
	선언부	리턴타입 메소드명(자료형 매개ㅕㄴ수)
	구현부	{
			실행할코드;
			return 리턴값;
		}

6) 메소드 호출 
- 매개변수 x 리턴값 x
	void method1(){
		syso("출력"); 
	}

	객체명.메소드명(); 

- 매개변수 o 리턴값 x 
	객체명.메소드명(변수); 

- 매개변수 x 리턴값 o
 	syso(객체명.메소드명()); 
	리턴타입과동일한자료형 변수명 = 객체명.메소드명(); 
	
- 매개변수 o 리턴값 o
	syso(객체명.메소드명(인수)); 
	리턴타입과동일한자료형 변수명 = 객체명.메소드명(인수); 

1. 메소드
1) 메소드와 메모리 
	메소드는 실행되면 메모리의 Stack 영역에 메소드 실행에 필요한 저장공간이 생긴다
	그곳에 메소드 내부에서 선언한 변수(매개변수, 지역변수)들의 저장공간이 생긴다 
	메소드의 코드가 모두 실행되어 종료되면 Stack영역에서 해당 메소드의 저장공간이 삭제된다(메모리 해제) 
	그러면 지역변수의 저장공간이 사라지므로 지역변수는 사용이 불가능하다.

+) 스택 프레임의 장점 
	메모리 관리 효율성 : 메소들르 호출할 때 필요한 메모리를 동적으로 할당하고, 효율이 끝나면 자동으로 해제된다 
	