서식에서 문자열(%s)에는 0으로 채우기를 적용할 수 없다. 

실수끼리 더하면 15자리까지 출력되는 이유??
- 정수는 형변환되어도 소수점 이하가 0이 된다. 
- 반면 실수는 정확한 값을 표현하지 못하기 때문에 오차가 있을 수 있다. 
- 실수끼리 연산에서 오차로 인해 15자리까지 출력된다. 

정수형 및 실수형, 논리형을 문자열로 바꾸려면 문자열(빈 문자열)과 연산해주면 된다.
- 이 때 연산 순서에 따라 결과가 달라질 수 있으므로 주의해야 한다. 

String -> char	=> "문자열".charAt(int index)
- String 자료형을 char 자료형으로 형변환할 때 사용한다.
- 문자열 변수 뒤에 .charAt()을 붙인다. 
- char 자료형은 하나의 문자만 담을 수 있기 때문에 특정 한 문자를 지정해 주어야 한다. 
- 소괄호 안에 문자열의 자리 번호를 입력한다. 
- 지정할 수 있는 범위 밖의 자리 번호를 입력하면 오류가 발생한다. 

String -> boolean => Boolean.parseBoolean()
- String 자료형을 booolean 자료형으로 형변환할 때 사용한다. 
- 소괄호 안에 문자열을 입력한다. 
- 문자열이 TURE(대소문자 무관)이면 true를 반환하고, 그렇지 않으면 false를 반환한다. 

Scanner 클래스  
- 클래스 파일 위치 : JRE -> java.base -> java.util -> Scanner.class
- 클래스 파일이 위치한 패키지가 import 되어야 한다. 
- ctrl + shift + o => 자동 import 
- .next() : 입력 받고 String 타입으로 반환, 콘솔에서 값을 입력받고 엔터를 누르면 입력이 종료된다. 
- 입력된 값은 버퍼에 저장되고 .next() 메소드가 가져간다. 
- 버퍼에서 띄어쓰기와 엔터를 가져가지 않는다. 
- 띄어쓰기 전까지의 값을 가져가고, 값이 입력되지 않은 채 엔터를 누르면 입력이 종료되지 않는다.(엔터를 소모하지 않으므로) 
- 띄어쓰기와 엔터는 그대로 버퍼에 남는다.
- .nextLine() : .next()와 달리 띄어쓰기를 포함해서 가져간다. 엔터 이전까지의 값을 가져온다. 엔터를 버퍼에서 지운다. 값을 입력하지 않고 엔터를 누르면 엔터를 소모하고 종료된다.
- .close() : Scanner 객체 종료, 메모리 및 스트림 등 해제 
- 다른 Scanner 객체를 만들어도 메소드를 실행할 수 없다. (이미 스트림이 닫힘) 

복합대입연산자 
- num += 5 => num = num + 5
- 왼쪽의 num : 저장공간, 오른쪽의 num : 값 
- 산술연산자 -> 대입연산자 순으로 연산
- 변수의 자료형에 맞게 형변환된다. 
