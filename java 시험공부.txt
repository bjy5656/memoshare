**jvm, jre, jdk 

jvm(java virtual machine)
- java 프로그램을 운영체제에 맞춰 실행할 수 있게 한다. 
- .class 파일인 자바 바이트코드를 해석 및 실행한다.
- 클래스 로딩, 메모리 관리 등의 역할도 수행한다. 

jre(java runtime environment) 
- jvm과 jvm을 실행할 때 필요한 런타임클래스, 표준 클래스 라이브러리 파일을 등을 가지고 있다. 


jdk(java development kit) 
- jre 외에 개발에 필요한 도구들을 가지고 있다.
- 컴파일러(javac.exe), 디버거(jdb), 다양한 개발도구(jar, javadoc) 등이 포함되어 있다. 

**jvm의 메모리 3가지 
stack 영역 
- 메소드에서 선언된 지역변수, 매개변수 및 메소드 실행 정보가 저장되는 영역이다. 지역변수와 메소드는 메소드 실행부터 종료시까지 존재하며, 매개변수는 메소드가 실행되는 동안 유지된다. 메소드 실행정보는 메소드가 실행되는 동안 stack frame 영역에 올라오게 된다. stack 영역에 선언된 변수는 개발자가 스스로 초기화를 해주어야 한다. 초기화를 하지 않고 변수를 사용하면 에러가 발생한다. 

heap 영역 
- 클래스 객체와 인스턴스 변수가 저장되는 영역이다. 동적으로 메모리를 할당한다. 인스턴스 변수는 변수 선언시 값을 대입하지 않아도 자동으로 기본값으로 초기화된다. 변수는 클래스 객체가 heap 메모리에 올라와 있는 동안 유지된다. 

method 영역 
- 프로그램 시작시 로딩되는 클래스 코드 정보, static 변수, static 메소드 등이 저장된다. 해당 메모리들은 프로그램 시작부터 종료까지 유지된다. 

**java 언어의 특징 
- 컴파일러가 코드를 번역하게 된다. 
- 객체지향 언어이다. 모든 프로그램이 객체로 구성되어 확장성, 유지보수성이 좋다. 
- JVM이 운영체제에 따라 java를 실행할 수 있게 도와므로 운영체제에 상관없이 한 번 작성된 프로그램을 실행시킬 수 있다. 
- 가비지 컬렉터가 불필요한 메모리를 자동 정리한다. 또한 필요한 클래스만 동적으로 로딩한다.

**형변환 
자동형변환 
- 작은 데이터 타입의 값을 큰 데이터 타입의 변수에 대입할 때 자동형변환된다. 
- 문자형 데이터를 int형 변수에 대입할 때 자동 형변환된다. 
- 정수타입 데이터와 실수타입 데이터를 산술연산할 때 실수타입 데이터로 자동 형볍환된다. 

강제형변환 
- 큰 데이터 타입의 값을 작은 데이터 타입의 값으로 강제 형변환한다. 
- 데이터를 담고 있는 변수나 값 앞에 명시적으로 (자료형)을 붙여주어 형변환한다. 

기본 자료형을 문자열 자료형으로 형변환 
- 기본 자료형과 빈 문자열 "" 을 더하여 문자열로 형변환한다. 

문자열 자료형을 기본 자료형으로 형변환 
- 해당 기본 자료형을 담고 있는 클래스명.parse(기본자료형)() 형태의 메소드에 문자열 데이터를 대입하여 형변환한다. 
- 문자형 데이터의 경우 "문자열".charAt(인덱스번호)의 형태로 메소드를 사용한다. 

**클래스, 객체, 상속, 다형성, 객체지향 
객체지향 
- 프로그램을 객체로 구성하고 객체의 상호작용으로 문제를 해결한다.
클래스 
- 데이터를 클래스 형태로 정의한다. 클래스는 비슷한 객체가 가지게 될 속성과 동작을 정의하는 설계도이며 클래스를 통해 객체를 생성한다. 
- 클래스는 사용자 정의 데이터 타입이다. 
객체 
- 객체는 객체가 속한 클래스의 설계도면에 정의된 통해 필드와 메소드의 기본적인 틀을 갖추고 있고, 여기에 객체마다의 특수한 값이 반영되어 생성된다. 
상속 
- 기존 클래스를 상속받아 필드와 메소드를 그대로 내려받고 여기에 자식클래스만이 가질 필드 및 메소드를 확장할 수 있다. 한번에 하나의 부모클래스만 상속할 수 있다. 
다형성 
- 같은 이름의 메소드가 객체에 따라 다르게 동작하도록 할 수 있다. 
- 오버로딩, 오버라이딩, 참조변수의 다형성이 있다. 

**변수의 종류
상수 	final 변수명 으로 지정한다	상수 풀에 저장된다. 	블록/클래스 종료까지 유지된다. 

지역변수	메소드 중괄호 안에서 선언된다.	stack에 저장된다.	메소드 종료시 소멸된다. 
매개변수	메소드 소괄호 안에서 선언된다. 	stack	 	메소드 실행 중 유지 
인스턴스변수	클래스 안,객체마다별도	heap		객체 살아있는 동안 
정적변수	static 키워드로 지정	method영역	프로그램 시작부터 종료까지 존재
	클래스 로딩 시 하나만 생성