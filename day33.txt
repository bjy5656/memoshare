day32(js 3일차)
SQLD 20문제
정처기 Python, Java 관련문제 다 풀기
네관사 Chapter2
리마 2급 접수 / 시험까지 보기
------------------------------------------------------------
복습 -> DOM -> 이벤트 -> 라이트 박스

0. 복습
1) 객체
	원시타입 값을 제외한 모든 값이 객체
	프로퍼티(property)와 메소드로 구성된다
	프로퍼티는 키와 값으로 구성되며 값의 위치에 오는 함수를 메소드라고 한다

2) 객체생성
	클래스로 생성
	생성자함수로 생성
	객체 리터럴로 생성

3) 객체사용
	.을 이용한다
	[]를 이용한다

4) 배열
	객체타입(object)
	배열이 저장하는 값을 요소(element)
	요소로 저장하는 값은 원시타입, 객체타입 가능하다

5) 배열생성
	배열 리터럴 대괄호[]를 사용하는 방법
	생성자 함수 Array()를 이용하는 방법

6) 배열사용
	배열명[idx]

7) 배열에서 사용하는 반복문
	for ... in
	for ... of

8) map() 함수
	배열의 각 요소에 대해 주어진 콜백함수를 호출하고 각 요소를 새로운 배열로 매핑시킨다
	const newArray = array.map(callback(element [, index[, array]][, thisArgs]));

9) filter() 함수
	주어진 콜백함수로 모든 배열요소의 조건을 충족하는 요소만을 가지고 새로운 배열을 생성한다
	const newArray = array.filter(callback(element [, index[, array]][, thisArgs]));
	
	element : 현재 처리중인 요소의 값
	index : 현재 처리중인 요소의 인덱스(선택)
	array : map(), filter()를 호출한 배열(선택)
	thisArgs : callback 함수 내에서 this 키워드가 참조할 객체(선택)

10) reduce() 함수
	배열을 순회하면서 하나의 값으로 누적할 때 사용하는 함수
	array.reduce(callback, initialValue);

	callback : 배열의 각 요소에 대해 실행할 함수
	initialValue : 누적 시작값, 첫번째 호출에서 사용될 값(작성하지 않으면 배열의 첫번째 요소가 initalValue로 사용되고
		두번째 요소부터 순회가 시작된다)
	
	accumulator : 누적된 값으로 각 호출에서 callback함수가 반환된 값
	currentValue : 현재 처리중인 배열의 요소
	currentIndex : 현재 요소의 인덱스(선택)
	array : reduce()가 호출된 원본 배열(선택)

11) 함수
- 일반함수
	function 함수명(매개변수1, 매개변수2){
		코드작성;
		return 리턴값;
	}

	디폴트 매개변수 	(매개변수1, 매개변수2=기본값)
	가변 매개변수	(...매개변수명)

- 익명함수
	let 변수명 = function (매개변수){
		코드작성;
		return 리턴값;
	};

- 콜백함수
	함수의 매개변수로 전달되는 함수를 의미한다
	모듈화를 시키기 위해 원하는 곳에서 실행할 때 사용한다(재사용성)
	
	콜백지옥 -> Promise와 asnyc/await

- 화살표함수
	() => {}

- 즉시실행함수
	한번만 사용하는 함수
	재사용할 목적이 없으므로 익명함수로 만든다

	(function (매개변수)){
		실핼할코드;
	})(매개변수로 넘겨줄 값);

- 재귀함수
	자기자신을 호출하는 함수
	
1. DOM
1) DOM(Document Object Model)
	html 태그들을 하나씩 객체화 한 것을 의미한다
	html 페이지 내용과 모양을 제어하기 위해 사용하는 객체이며 html 태그당 DOM 객체가 하나씩 생성된다
	html 태그의 포함관계에 따라서 부모, 자식, 형제 관계로 구성된다
	html 요소들(<h1>, <div>, <input>)을 모두 노드(node)라는 객체로 구조화한다
	
2) DOM API
	DOM을 다루기 위한 프로그래밍 인터페이스(메소드, 속성 등)
	브라우저가 제공하는 Javascript 객체/메소드 집합
	ex) document.getElementById(), element.innerHTML 등

2. DOM Tree구조
	문서 구조를 트리(Tree)형태로 표현한 것
	최상위 노드 : document
	주요 노드 : 요소노드(Element Node) - HTML태그
		속성노드(Attribute Node) - 태그 속성
		텍스트 노드(Text Node)	- 텍스트 컨텐츠

	<body>
	  <div id="box">div box</div>
	</body>

	document	브라우저가 제공하는 최상위 객체
	|_ html		요소노드
   	    |_ body	요소노드
	        |_div (id="box")	div요소노드, id="box" div요소의 속성노드로 존재하지만 일반적으로 div노드의 속성처럼 표현됨
		    |_ div box 		div의 텍스트 노드

	<body>
	  <ul id="menu">
	    <li class="item">home</li>
	    <li class="item">about</li>
	  </ul>
	</body>

	document
	|_ html
	    |_ body
      		|_ul (id="menu")
		   |_ li (class="item")
		   |	|_ "home" 텍스트노드
		   |_ li (class="item")
			|_ "about" 텍스트노드

3. DOM 요소 선택(Selector 종류)
1) 메소드
	메소드					반환형태		의미
	getElementById("id")			단일요소객체	id로 선택
	getElementByClassName("class")		HTMLCollection	클래스명으로 여러 요소 선택
	getElementByTagName("tag")		HTMLCollection	태그명으로 여러 요소 선택
	getElementByName("name")		NodeList	name 속성 기준 선택
	querySelector("선택자")			첫번째일치요소	CSS 선택자 사용
	querySelectorAll("선택자")		NodeList	CSS 선택자, 다수 선택 가능

2) HTMLCollection과 NodeList
			HTMLCollection		NodeList
	업데이트		실시간 반영(동적)		정적 스냅샷
	포함노드		요소노드만 포함		텍스트, 주석 노드도 포함 가능
	배열메소드		사용불가 forEach, map 등	일부 사용가능 forEach 가능
	인덱스접근		가능			가능
	반복문사용		for,for ... of 사용가능	for, for ... of, forEach 사용가능
	변경감지		DOM 변경 시 자동반영	생성시점 기준으로 고정됨
	
	HTMLCollection은 실시간 반영되는 동적 컬렉션(배열은 아님)
	NodeList는 일반적으로 정적리스트, 일부 배열 메소드 (forEach 등) 사용가능
	querySelector, querySelectorAll은 CSS 선택자 문법을 그대로 사용가능
	
+) CSS 선택자
- 기본선택자
	#아이디명
	.클래스명
	태그명

- 조합선택자
	태그.클래스명
	태그#아이디명
	
- 자식 선택자
	태그 태그	

- 후손 선택자
	태그 > 태그

- 형제 선택자
	태그 + 태그	인접형제선택자
	태그 ~ 태그	일반형제선택자

- 속성 선택자
	input[type='text']
	태그명[속성명]
	태그명[속성명=값]

- 가상클래스/가상요소 선택자
	태그:hover	마우스 올렸을 때
	input:focus	포커스된 입력요소
	li:first-child	첫번째 자식
	li:last-child	마지막 자식
	li:nth-child(2)	2번째 자식

- 전체선택자
	*

4. DOM 요소 조작
	요소의 내용을 조작할 때 사용하는 속성

1) innerHTML
	요소의 내부 HTML을 나타내는 속성
	HTML 태그를 포함한 요소의 내용을 변경할 수 있다
	ex) const test = document.getElementById("test");
		test.innerHTML = "<strong>안녕</strong>";

2) innerText
	요소의 텍스트 내용을 나타내는 속성
	HTML 태그를 고려하지 않고 텍스트 내용만 조작할 수 있다
	ex) const test = document.getElementById("test");
		test.innerHTML = "<strong>안녕하세요</strong>";

3) 속성 조작
	getAttribute('속성명')	: 속성가져오기
	setAttribute('속성명', '값') : 속성 설정
	removeAttribute('속성명') : 속성 삭제

4) 스타일 조작
	element.style.속성명 = "값"
		속성명 : 카멜표기법으로 사용한다
	ex) background-color => backgroundColor

5. 이벤트
	발생한 사건을 의미한다
	사용자가 버튼을 클릭하거나 항목을 선택하는 등의 사건을 이벤트라고 한다
	이벤트가 발생하면 자바스크립트의 코드가 실행되도록 구현하여 사용자와 상호작용하는 페이지를 만들 수 있다

- 마우스 이벤트
	click : 요소를 클릭하면 발생
	mouseover : 마우스 커서를 해당 요소에 올리면 발생
	mouseout : 마우스 커서가 해당 요소의 영역을 벗어나면 발생
	..
- 키보드 이벤트
	keydown : 키보드를 누르는 동안 발생
	keyup : 키보드를 눌렀다가 뗄 때 발생
	keypress : 키보드를 눌렀을 때 발생
	..
- 문서로딩 이벤트
	load : 문서(웹페이지)가 로딩이 끝나면 발생
	unload : 문서를 벗어날 때 발생
	scroll : 문서가 스크롤 되면 발생
	..
- 폼 이벤트
	입력이 가능한 요소의 이벤트
	focus : 폼 요소에 포커스 되면 발생
	blur : 포커스를 잃으면 발생
	change : 입력값이 바뀌거나 체크상태가 변경되면 발생
	submit : submit 버튼을 누르면 발생
	..

6. 라이트 박스
	라이트 박스는 여러 사이트에서 사용하는 효과이다
	작은 이미지를 클릭하면 큰 사진으로 보여주는 등 여러 상황에서 활용할 수 있다

1) data 속성
	data-데이터이름 = '데이터'
	브라우저는 무시하는 속성이므로 특별한 기능은 없으며 개발자가 필요한 데이터를 저장하는 속성이다
	자바스크립트에서는 data 속성을 가져와서 사용할 수 있다

2) data 속성 사용방법
	요소.getAttribute('data-데이터이름')
	요소.dataset.속성명

--------------------------------------------------------------------------------
+) DOM과 이벤트
	기존의 이벤트 처리방식은 HTML코드에 자바스크립트를 사용하였다
	가독성과 유지보수에 좋지 않다
	DOM을 사용하여 자바스크립트에 HTML요소를 불러와 이벤트를 처리할 수 있다

▶ DOM 사용하기
	document.메소드()
	DOM에서는 HTML요소를 선택자를 이용해 접근하는 여러 메소드를 제공한다

1) getElementById("id명")
	태그의 id속성으로 해당 요소를 가져온다
	id는 중복을 허용하지 않으므로 메소드의 결과 객체 1개이다
2) getElementsByClassName("class명")
	태그의 class속성으로 해당 요소를 가져온다
	class는 여러 요소가 같은 값을 가질 수 있으므로 메소드의 결과는 여러 객체를 담은 배열이다
	(forEach 사용 불가능 => HTMLCollection)
3) getElementsByTagName('tag명')
	태그 이름을 가진 모든 요소를 가져온다
	태그는 여러 요소가 같은 값을 가질 수 있으므로 메소드의 결과는 여러 객체를 담은 배열이다
4) getElementByName('name명')
	name 속성으로 모든 요소를 가져온다
5) querySelector('선택자')
	id, class 외에도 여러 방법을 요소를 가져올 수 있다
	css선택자를 활용하면 되므로 id는 #으로 class는 .으로 사용하여 선택자를 작성한다
	1개의 요소를 가져올 때 사용한다
6) querySelectorAll('선택자')
	id, class 외에도 여러 방법을 요소를 가져올 수 있다
	css선택자를 활용하면 되므로 id는 #으로 class는 .으로 사용하여 선택자를 작성한다
	여러개의 요소를 가져올 때 사용하며 메소드의 결과는 객체를 담은 배열을 반환한다

▶ 요소 내용 가져오기, 수정하기
- 요소.innerHTML
	요소의 text와 내부의 태그까지 수정가능하다, 요소의 text를 가져와서 콘솔에 출력된다
- 요소.innerText
	요소의 text 수정가능하다, 요소의 text를 가져와서 콘솔에 출력된다

▶ 요소 속성 가져오기, 수정하기, 삭제하기
- 요소.getAttribute('속성명')
	해당 요소의 특정 속성을 가져온다(태그의 속성을 가져올 때 사용한다)
- 요소.setAttribute('속성명', '값')
	해당 요소의 특정 속성과 값을 설정한다
- 요소.removeAttribute('속성명')
	요소에서 특정 속성을 제거한다

▶ HTML 요소 프로퍼티 직접 수정하기
- 요소.style.속성명 = '값'
	style 프로퍼티를 이용하여 직접 수정한다
	속성명은 css속성명과 동일하다
	단, -는 사용하지 않으며 카멜 표기법을 사용한다
	ex) background-color => backgroundColor




















